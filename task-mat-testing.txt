In order to test the program with 100,000 lines of code, I created a function  that generates matrices of minimum 5x5 and maximum 10x10 with 1 and 0 randomly generated components.
In primul rand functia deschide fisierul mat.in.py apoi scrie in el folosid modulul de scriere "w":with open('mat.in.py', 'w') as file:".The function generates lines using a for structure that has a variable as parameter: "for _ in range(num_matrices):
". This loop will be repeated num_matrix times which will be set to 100,000. After this function initializes the rows and columns through the variables rows and cols. They will receive as parameters random numbers between a maximum and a minimum (between 5 and 10), rows = random.randint(min_rows, max_rows), cols = random.randint(min_cols, max_cols). To generate random numbers we use the random library. The contents of the matrices are also generated using a function from the random, random.choise library that you will have to choose choose between 0 and 1. The function will generate 0 and 1 depending on the number of previously generated columns and rows, matrix = [[random.choice(['0', '1']) for _ in range(rows) ] for _ in range(cols)]. To display the matrix in rowsxcols format he used file.write(f"{rows}x{cols}:").Then each row of the matrix is written to the file without spaces between numbers using a for is file.write(''.join(row)) loop that concatenates
the elements of the matrix in a single and of characters. At the end there is also /n to move to the next row.
To show the correctness of the code, I tested for several matrices that I wrote on the line and the column to see it as well as possible.
Exemple:
mat.in:
7x5:10010100101010110010101111100100110

    "10010",
    "10010",
    "10110",
    "01010",
    "11001",
    "01111",
    "00100"
In mat.out for this metric we get the result "0 0 0" because none of the three conditions are met.
7x6:111000110110100001001010111011001110101011

     "111000",
    "110110",
    "100001",
    "001010",
    "111011",
    "001110",
    (1)01011
mat.out:1 0 0
5x6:110010101101110000100010111010
   " 110010",
    "101101",
    "110000",
    "1000[1]0",
    "1110[1]0"
mat.out:0 1 0